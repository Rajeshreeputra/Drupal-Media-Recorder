<?php
/**
 * @file
 * Adds a media recorder widget and add form to the media module.
 */

/**
 * Implements hook_libraries_info().
 */
function media_recorder_libraries_info() {
  $libraries = array();

  $libraries['swfobject'] = array(
    'name' => 'SWFObject',
    'description' => 'SWFObject is an easy-to-use and standards-friendly method to embed Flash content, which utilizes one small JavaScript file.',
    'vendor url' => 'http://code.google.com/p/swfobject',
    'download url' => 'http://swfobject.googlecode.com/files/swfobject_2_2.zip',
    'version arguments' => array(
      'file' => 'swfobject.js',
      'pattern' => '@v([0-9a-zA-Z\.-]+)@',
    ),
    'files' => array(
      'js' => array(
        'swfobject.js' => array(
          'type' => 'file',
          'scope' => 'header',
          'group' => JS_LIBRARY,
        ),
      ),
    ),
  );
  $libraries['recorder.js'] = array(
    'name' => 'recorder.js',
    'description' => 'JavaScript library to record audio in browsers as used in the SoundCloud Javascript SDK.',
    'vendor url' => 'https://github.com/jwagener/recorder.js',
    'download url' => 'https://github.com/jwagener/recorder.js/zipball/master',
    'version arguments' => array(
      'file' => 'recorder.js',
      'pattern' => '@version: ([0-9a-zA-Z\.-]+),@',
    ),
    'dependencies' => array(
      'swfobject (>=2.2)',
    ),
    'files' => array(
      'js' => array('recorder.js'),
    ),
  );
  $libraries['Recorderjs'] = array(
    'name' => 'Recorderjs',
    'description' => 'A plugin for recording/exporting the output of Web Audio API nodes',
    'vendor url' => 'https://github.com/mattdiamond/Recorderjs',
    'download url' => 'https://github.com/mattdiamond/Recorderjs/zipball/master',
    'version' => '',
    'files' => array(
      'js' => array('recorder.js'),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_menu().
 */
function media_recorder_menu() {
  $items = array();

  $items['file/add/record'] = array(
    'title' => 'Record',
    'description' => 'Add recordings to your media library.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_recorder_add'),
    'access callback' => 'file_entity_access',
    'access arguments' => array('create'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['media_recorder/record/%'] = array(
    'title' => 'Record',
    'description' => 'Record a video or audio file.',
    'page callback' => 'media_recorder_record',
    'access callback' => 'file_entity_access',
    'access arguments' => array('create'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/media/mediarecorder'] = array(
    'title' => 'Media Recorder',
    'description' => 'Configure the media recorder.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_recorder_admin_form'),
    'access arguments' => array('administer files'),
    'file' => 'includes/media_recorder.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_help().
 */
function media_recorder_help($path, $arg) {
  if ($path == 'admin/help#media_recorder') {
    $output = file_get_contents(drupal_get_path('module', 'media_recorder') . '/README.txt');
    return nl2br($output);
  }
}

/**
 * Menu callback for recording a media file.
 */
function media_recorder_record() {

  // Get filename.
  $filename = arg(2);
  // File data is sent using XHR.
  if (isset($_FILES['mediaRecorder']['tmp_name'])) {
    $url = $_FILES['mediaRecorder']['tmp_name'];
  }
  // Process file.
  if (!empty($filename) && !empty($url)) {

    // Get file data.
    $uri = 'temporary://' . $filename;
    $data = file_get_contents($url);

    // Save file as temporary file.
    $file = file_save_data($data, $uri, FILE_EXISTS_REPLACE);
    $file->status = 0;
    file_save($file);

    // Return file information.
    echo drupal_json_output($file);
  }
  else {
    echo FALSE;
  }
}

/**
 * Implements hook_media_browser_plugin_info().
 */
function media_recorder_media_browser_plugin_info() {
  $info['media_recorder'] = array(
    'title' => t('Recorder'),
    'class' => 'MediaRecorderBrowser',
  );

  return $info;
}

/**
 * Provides a form for adding media items using the media recorder.
 */
function media_recorder_add($form, &$form_state) {

  // Set field variables.
  $field_name = 'field_media_recorder';
  $langcode = LANGUAGE_NONE;
  $items = array();
  $delta = 0;
  $field = array(
    'field_name' => $field_name,
    'cardinality' => 1,
    'settings' => array(
      'uri_scheme' => 'public',
      'display_default' => 0,
    ),
    'cardinality' => 1,
  );
  $instance = array(
    'settings' => array(
      'file_directory' => variable_get('media_recorder_upload_directory', ''),
      'file_extensions' => 'wav mp3 m4a mov m4v mp4 mpeg mpg avi ogg oga ogv',
    ),
    'widget' => array(
      'settings' => array(
        'progress_indicator' => 'throbber',
      ),
    ),
  );
  $element['#field_name'] = $field_name;
  $element['#language'] = $langcode;
  $element['#delta'] = $delta;
  $element['#id'] = 'edit-field-media-recorder-und-0';
  $element['#field_parents'] = array();
  $element['#columns'] = array('fid', 'display', 'description');
  $element['#title'] = t('Media Recorder');
  $element['#description'] = '';
  $element['#required'] = TRUE;
  $element['#upload_location'] = 'public://' . variable_get('media_recorder_upload_directory', '');
  $element['#upload_validators']['file_validate_extensions'][] = 'wav';

  // Add title field.
  $form['#title'] = t('Title');

  // Add title field.
  $form['title']['#type'] = 'textfield';
  $form['title']['#title'] = t('Title');
  $form['title']['#required'] = TRUE;

  // Add media recorder element.
  $form[$field_name]['#type'] = 'container';
  $form[$field_name]['#tree'] = TRUE;
  $form[$field_name][$langcode] = media_recorder_field_widget_form($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);

  // Remove file field widget process, since this is not an actual field widget.
  $key = array_search('file_field_widget_process', $form[$field_name][$langcode][0]['#process']);
  unset($form[$field_name][$langcode][0]['#process'][$key]);

  // Add media browser javascript and CSS.
  drupal_add_js(drupal_get_path('module', 'media_recorder') . '/js/media-recorder.browser.js');

  // Add a submit button.
  $form['actions']['submit']['#type'] = 'submit';
  $form['actions']['submit']['#value'] = t('Save Recording');

  return $form;
}

/**
 * Submit handler for media_recorder_add form.
 * @see media_recorder_add()
 */
function media_recorder_add_submit($form, &$form_state) {
  $fid = $form_state['values']['field_media_recorder'][LANGUAGE_NONE][0]['fid'];
  if ($fid != 0) {
    $file = file_load($fid);
    if (!$file->status) {
      $file->status = FILE_STATUS_PERMANENT;
      $file = file_save($file);
    }
    drupal_set_message(t('The file <em>!filename</em> was successfully loaded.', array('!filename' => l(check_plain($file->filename), 'file/' . $file->fid))), 'status');
  }
  else {
    drupal_set_message(t('An unrecoverable error occurred. Try reloading the page and submitting again.'), 'error');
  }
}

/**
 * Implements hook_field_widget_info().
 */
function media_recorder_field_widget_info() {
  return array(
    'media_recorder' => array(
      'label' => t('Media Recorder'),
      'field types' => array('file'),
      'settings' => array(
        'progress_indicator' => 'throbber',
        'allowed_schemes' => array('public', 'private'),
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function media_recorder_field_widget_settings_form($field, $instance) {

  // Get default file widget settings form.
  $form = file_field_widget_settings_form($field, $instance);

  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function media_recorder_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  // Get default file widget form.
  $elements = file_field_widget_form($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);

  // Alter process callbacks.
  $element_info = element_info('managed_file');
  foreach (element_children($elements) as $delta) {
    $elements[$delta]['#process'][] = 'media_recorder_field_widget_form_process';
  }

  return $elements;
}

/**
 * An element #process callback.
 * @see media_recorder_field_widget_form()
 */
function media_recorder_field_widget_form_process($element, &$form_state, $form) {

  // Get field info.
  $field_name = $element['#field_name'];
  $langcode = $element['#language'];
  $delta = $element['#delta'];

  // Get fid and set media-recorder specific class.
  $fid = isset($element['#value']['fid']) ? $element['#value']['fid'] : (isset($form_state['values'][$field_name][$langcode][$delta]['fid']) ? $form_state['values'][$field_name][$langcode][$delta]['fid'] : 0);
  $element['fid']['#attributes']['class'][] = 'media-recorder-fid';

  // Add file preview to render array.
  if ($fid) {
    $file = file_load($fid);
    $element['preview'] = array(
      'file' => file_view($file),
      '#weight' => 50,
      '#prefix' => '<div class="media-recorder-preview">',
      '#suffix' => '</div>',
    );
    if ($file->filemime == 'video/youtube') {
      // Remove file element upload validators.
      unset($element['#upload_validators']);
      $form_state['values'][$field_name][$langcode][$delta]['toggle'] = 'youtube';
    }
  }

  // Alter file managed buttons.
  $element['upload']['#attributes']['class'][] = 'media-recorder-upload';
  $element['upload_button']['#attributes']['class'][] = 'media-recorder-upload-button';
  $element['remove_button']['#attributes']['class'][] = 'media-recorder-remove-button';
  $element['remove_button']['#weight'] = 100;

  // Append a description.
  $element['#description'] .= '<br />Before recording please fill in content title, which is used to generate the recording filename.';

  // Add toggle buttons.
  $toggle = isset($form_state['values'][$field_name][$langcode][$delta]['toggle']) ? $form_state['values'][$field_name][$langcode][$delta]['toggle'] : 'record';
  if (module_exists('media_youtube')) {
    $element['toggle'] = array(
      '#type' => 'radios',
      '#options' => array(
        'record' => t('Recorder'),
        'youtube' => t('Youtube'),
      ),
      '#default_value' => $toggle,
      '#ajax' => array(
        'callback' => 'media_recorder_field_widget_form_process_ajax_refresh',
        'wrapper' => $element['#id'] . '-ajax-wrapper',
      ),
      '#attributes' => array(
        'class' => array('media-recorder-toggle'),
      ),
    );
  }

  // Use the HTML5/Flash recorder.
  if ($toggle == 'record') {

    // Add media recorder markup.
    $element['record']['#markup'] = '<div class="media-recorder-wrapper"></div>';

    // Add validation handler to beginning of validation handler stack.
    array_unshift($element['#element_validate'], 'media_recorder_field_widget_form_process_record_validate');

    // Add javascript libraries.
    $element['#attached']['library'][] = array('system', 'ui.progressbar');
    $element['#attached']['library'][] = array('system', 'ui.slider');
    $element['#attached']['libraries_load'][] = array('swfobject');
    $element['#attached']['js'][] = drupal_get_path('module', 'media_recorder') . '/js/media-recorder.js';
    $element['#attached']['js'][] = drupal_get_path('module', 'media_recorder') . '/js/jquery.mediaRecorder.js';
  }

  // Use the youtube upload widget.
  if ($toggle == 'youtube') {

    // Add hidden fields for youtube.
    $element['youtube']['#type'] = 'hidden';
    $element['youtube']['#attributes']['class'][] = 'media-recorder-youtube';

    // Add youtube recorder markup.
    $element['youtube_upload']['#markup'] = '<div id="youtube-upload-widget"><div id="youtube-player-wrapper"><div id="youtube-player"></div></div><div id="youtube-upload-wrapper"><div id="youtube-upload"></div></div></div>';

    // Add validation handler while overwriting normal file validation handlers.
    $element['#element_validate'] = array('media_recorder_field_widget_form_process_youtube_validate');

    // Remove file element upload validators.
    unset($element['#upload_validators']);

    // Add javascript libraries.
    $element['#attached']['js'][] = drupal_get_path('module', 'media_recorder') . '/js/media-recorder-youtube.js';
  }

  // Add hidden refresh submit, which is triggered on record finish.
  // This will rebuild the form with new file preview.
  $element['refresh'] = array(
    '#type' => 'submit',
    '#executes_submit_callback' => FALSE,
    '#value' => t('Refresh'),
    '#ajax' => array(
      'callback' => 'media_recorder_field_widget_form_process_ajax_refresh',
      'wrapper' => $element['#id'] . '-ajax-wrapper',
    ),
    '#attributes' => array(
      'class' => array('js-hide', 'media-recorder-refresh'),
    ),
  );

  // Add javascript settings.
  $element['#attached']['js'][] = array(
    'data' => array(
      'mediaRecorder' => array(
        'recordingPath' => url('media_recorder/record'),
        'fileName' => uniqid() . '.wav',
        'filePath' => 'temporary://',
        'timeLimit' => variable_get('media_recorder_timelimit', 300) * 1000,
        'width' => variable_get('media_recorder_width', 300),
        'height' => variable_get('media_recorder_height', 100),
        'swfurl' => libraries_get_path('recorder.js', TRUE),
        'html5url' => libraries_get_path('Recorderjs', TRUE),
      ),
    ),
    'type' => 'setting',
  );

  // Add custom css.
  $element['#attached']['css'][] = drupal_get_path('module', 'media_recorder') . '/css/media-recorder.css';

  return $element;
}

/**
 * Ajax callback for form element rebuild.
 * @see media_recorder_field_widget_form_process()
 */
function media_recorder_field_widget_form_process_ajax_refresh($form, &$form_state) {

  // Rebuild the form.
  $form_state['rebuild'] = TRUE;

  // Get the file field element.
  $parents = $form_state['triggering_element']['#array_parents'];
  array_pop($parents);
  array_pop($parents);
  array_pop($parents);
  $element = drupal_array_get_nested_value($form, $parents);

  return $element;
}

/**
 * Custom validation callback.
 * @see media_recorder_field_widget_form_process()
 */
function media_recorder_field_widget_form_process_record_validate(&$element, &$form_state) {

  // Get field information.
  $field_name = $element['#parents'][0];
  $langcode = $element['#parents'][1];
  $delta = isset($element['#parents'][2]) ? $element['#parents'][2] : 0;

  // Get the fid.
  $fid = !empty($form_state['values'][$field_name][$langcode][$delta]['fid']) ? $form_state['values'][$field_name][$langcode][$delta]['fid'] : 0;

  // Load file from fid.
  if ($fid != 0) {
    $file = file_load($fid);
  }

  // Grab title from entity if available.
  $title = '';
  if (isset($form_state['values']['title']) && !empty($form_state['values']['title'])) {
    $title = $form_state['values']['title'];
  }

  // Add custom logic for comments.
  elseif (isset($form_state['comment']) && is_object($form_state['comment'])) {
    // Use the comment subject value if present.
    if (isset($form_state['values']['subject']) && !empty($form_state['values']['subject'])) {
      $title = $form_state['values']['subject'];
    }
    // Otherwise use the node title.
    elseif (isset($form_state['comment']->nid) && is_numeric($form_state['comment']->nid)) {
      $node = node_load($form_state['values']['nid']);
      $title = t('Comment on @title', array('@title' => $node->title));
    }
  }

  // Process file.
  if (isset($file->fid)) {

    // Validate file extensions, since managed file validates client side.
    $file->filename = drupal_basename($file->uri);
    $file_validate_size_errors = file_validate($file, $element['#upload_validators']);
    if (empty($file_validate_size_errors)) {

      // Prepare directory.
      $path_info = pathinfo($file->uri);
      if (module_exists('token')) {
        $upload_location = token_replace($element['#upload_location']);
      }
      else {
        $upload_location = $element['#upload_location'];
      }
      if (file_prepare_directory($upload_location, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {

        // Add new title.
        if (!empty($title)) {
          $file->filename = trim($title);
        }

        // Move the file to the field's upload location.
        $file = file_move($file, $upload_location);

        // Set file field input & values.
        drupal_array_set_nested_value(
          $form_state['input'],
          $element['#parents'],
          array(
            'fid' => $file->fid,
            'display' => TRUE,
            'toggle' => 'record',
          )
        );
        drupal_array_set_nested_value(
          $form_state['values'],
          $element['#parents'],
          array(
            'fid' => $file->fid,
            'display' => TRUE,
            'toggle' => 'record',
          )
        );
      }
    }

    // Report file validation errors.
    else {
      form_set_error('media_recorder', implode('<br />', $file_validate_size_errors));
      return;
    }
  }
}

/**
 * Custom validation callback.
 * @see media_recorder_field_widget_form_process()
 */
function media_recorder_field_widget_form_process_youtube_validate($element, &$form_state) {

  // Get field information.
  $field_name = $element['#parents'][0];
  $langcode = $element['#parents'][1];
  $delta = isset($element['#parents'][2]) ? $element['#parents'][2] : 0;

  // Get field values.
  $title = '';
  $fid = !empty($form_state['values'][$field_name][$langcode][$delta]['fid']) ? $form_state['values'][$field_name][$langcode][$delta]['fid'] : 0;
  $youtube = !empty($form_state['values'][$field_name][$langcode][$delta]['youtube']) ? $form_state['values'][$field_name][$langcode][$delta]['youtube'] : '';

  // Grab title from entity if available.
  $title = '';
  if (isset($form_state['values']['title']) && !empty($form_state['values']['title'])) {
    $title = $form_state['values']['title'];
  }

  // Add custom logic for comments.
  elseif (isset($form_state['comment']) && is_object($form_state['comment'])) {
    // Use the comment subject value if present.
    if (isset($form_state['values']['subject']) && !empty($form_state['values']['subject'])) {
      $title = $form_state['values']['subject'];
    }
    // Otherwise use the node title.
    elseif (isset($form_state['comment']->nid) && is_numeric($form_state['comment']->nid)) {
      $node = node_load($form_state['values']['nid']);
      $title = t('Comment on @title', array('@title' => $node->title));
    }
  }

  if (is_string($youtube) && !empty($youtube)) {

    // Create a youtube link from youtube video value.
    $embed_code = 'http://youtube.com/watch?v=' . $youtube;

    // Try saving the youtube file using media_internet_get_provider().
    try {
      $provider = media_internet_get_provider($embed_code);
      $file = $provider->save();
    }
    catch (Exception $e) {
      form_set_error('youtube', $e->getMessage());
      return;
    }

    // Check that file saved correctly.
    if (!$file->fid) {
      form_set_error('youtube', t('The file %file could not be saved. An unknown error has occurred.', array('%file' => $embed_code)));
      return;
    }
    else {
      // Save as temporary file with new title.
      $file->filename = trim($title);
      $file->display = TRUE;
      $file->status = 0;
      $file = file_save($file);

      // Set file field input & values.
      drupal_array_set_nested_value(
        $form_state['input'],
        $element['#parents'],
        array(
          'fid' => $file->fid,
          'display' => TRUE,
          'toggle' => 'youtube',
        )
      );
      drupal_array_set_nested_value(
        $form_state['values'],
        $element['#parents'],
        array(
          'fid' => $file->fid,
          'display' => TRUE,
          'toggle' => 'youtube',
        )
      );
    }
  }
}
