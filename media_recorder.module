<?php
/**
 * @file
 * Adds a media recorder widget and add form to the media module.
 */

/**
 * Implements hook_library().
 */
function media_recorder_library() {
  $libraries = array();
  $libraries['swfobject'] = array(
    'title' => 'SWFObject',
    'version' => '2.2',
    'website' => 'http://code.google.com/p/swfobject/',
    'js' => array(
      libraries_get_path('swfobject') . '/swfobject.js' => array('group' => JS_LIBRARY, 'preprocess' => FALSE),
    ),
  );
  $libraries['wami'] = array(
    'title' => 'WAMI Recorder',
    'version' => '',
    'website' => 'http://code.google.com/p/wami-recorder/',
    'js' => array(
      libraries_get_path('wami') . '/recorder.js' => array('group' => JS_LIBRARY, 'preprocess' => FALSE),
    ),
  );
  $libraries['Recorderjs'] = array(
    'title' => 'Recorderjs',
    'version' => '',
    'website' => 'https://github.com/mattdiamond/Recorderjs/',
    'js' => array(
      libraries_get_path('Recorderjs') . '/recorder.js' => array('group' => JS_LIBRARY, 'preprocess' => FALSE),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_menu().
 */
function media_recorder_menu() {
  $items = array();
  // Adds a tab to the media browser.
  $items['file/add/record'] = array(
    'title' => 'Voice Recorder',
    'description' => 'Add internet files to your media library.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_recorder_add'),
    'access callback' => 'media_recorder_access',
    'type' => MENU_LOCAL_TASK,
  );
  // Callback that process the php://input from Wami.swf.
  $items['media_recorder/record/%'] = array(
    'title' => 'Record',
    'description' => 'Record a video or audio file.',
    'page callback' => 'media_recorder_record',
    'access callback' => 'media_recorder_access',
    'callback arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/media/mediarecorder'] = array(
    'title' => 'Media Recorder',
    'description' => 'Configure the media recorder.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_recorder_admin_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'media_recorder.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function media_recorder_theme() {
  return array(
    'media_recorder' => array(
      'template' => 'theme/media-recorder',
      'variables' => array(
        'cssid' => 'media-recorder',
        'width' => 300,
        'height' => 100,
        'timelimit' => 300000,
        'audio' => NULL,
      ),
    ),
  );
}

/**
 * Preprocess function for a player.
 */
function template_preprocess_media_recorder(&$variables) {
  $variables['cssid'] = is_string($variables['cssid']) ? $variables['cssid'] : 'media-recorder';
  $variables['width'] = is_numeric($variables['width']) ? $variables['width'] : 300;
  $variables['height'] = is_numeric($variables['height']) ? $variables['height'] : 100;
  $variables['timelimit'] = is_numeric($variables['timelimit']) ? gmdate('i:s', $variables['timelimit']) : '05:00';
  $fid = (isset($variables['audio']) && is_numeric($variables['audio'])) ? $variables['audio'] : '';
  $file = !empty($fid) ? file_load($fid) : NULL;
  // Render audio file.
  if (is_object($file)) {
    $url = file_create_url($file->uri);
    // Mediaelement available.
    if (module_exists('mediaelement')) {
      $settings = array(
        'controls' => 1,
        'width' => '100%',
        'height' => 30,
        'download_link' => 0,
        'download_text' => t('Download'),
      );
      $js_settings = array();
      $js_settings['opts'] = array();
      $js_settings['controls'] = (bool) $settings['controls'];
      $js_settings['opts']['audioWidth'] = '100%';
      $js_settings['opts']['audioHeight'] = 30;
      $class = 'mediaelement_audio' . $variables['id'];
      $audio = array(
        '#theme' => 'mediaelement_audio',
        '#attributes' => array(
          'src' => $url,
          'class' => $class,
        ),
        '#settings' => $settings,
        '#attached' => array(
          'library' => array(array('mediaelement', 'mediaelement')),
          'js' => array(
            drupal_get_path('module', 'mediaelement') . '/mediaelement.js' => array(),
            0 => array('type' => 'setting', 'data' => array('mediaelement' => array('.' . $class => $js_settings))),
          ),
        ),
      );
      $variables['audio'] = drupal_render($audio);
    }
    // Mediaelement not available.
    else {
      $variables['audio'] = '<audio id="media-recorder-audio" controls src="' . $url . '" type="audio/wav" width="300" height="30"></audio>';
    }
  }
  // No file present.
  else {
    $variables['audio'] = '<audio id="media-recorder-audio" controls width="300" height="30"></audio>';
  }
}

/**
 * Menu callback for recording a media file.
 */
function media_recorder_record() {
  global $user;
  // Get filename.
  $filename = arg(2);
  // File data is sent using XHR.
  if (isset($_FILES['mediaRecorder']['tmp_name'])) {
    $url = $_FILES['mediaRecorder']['tmp_name'];
  }
  // File data is sent from flash.
  else {
    $url = 'php://input';
  }
  // Process file.
  if (!empty($filename) && !empty($url)) {
    $upload_directory = 'public://media_recorder';
    file_prepare_directory($upload_directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
    $uri = $upload_directory . '/' . $filename;
    $data = file_get_contents($url);
    $file = file_save_data($data, $uri, FILE_EXISTS_REPLACE);
    $file->status = 0;
    file_save($file);
    echo drupal_json_output($file);
  }
  else {
    echo FALSE;
  }
}

/**
 * Access callback for the media_recorder media browser plugin.
 */
function media_recorder_access($account = NULL) {
  return user_access('add media from media recorder');
}

/**
 * Implements hook_permission().
 */
function media_recorder_permission() {
  return array(
    'add media from media recorder' => array(
      'title' => t('Add media using the media recorder.'),
      'description' => t('Add media using a the media recorder widget.'),
    ),
  );
}

/**
 * Provides a form for adding media items using the Wami Recorder.
 */
function media_recorder_add($form, &$form_state = array(), $types = NULL) {
  global $user;
  // Add class to form to designate as using media recorder widget.
  $form['#attributes']['class'][] = 'field-widget-media-recorder';
  // Add media recorder container.
  $form['media_recorder']['#type'] = 'container';
  $form['media_recorder']['#tree'] = TRUE;
  $form['media_recorder']['#required'] = TRUE;
  // Add title field.
  $form['media_recorder']['media_recorder_title']['#type'] = 'textfield';
  $form['media_recorder']['media_recorder_title']['#title'] = t('Title');
  // Add hidden fid field.
  $form['media_recorder']['und'][0]['fid']['#type'] = 'hidden';
  $form['media_recorder']['#process'] = array('media_recorder_add_form_process');
  // Add a hidden filepath field.
  $form['media_recorder']['und'][0]['media_recorder_filepath']['#type'] = 'hidden';
  // Add a submit button.
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit']['#type'] = 'submit';
  $form['actions']['submit']['#value'] = t('Save Recording');
  return $form;
}

/**
 * Custom validation callback.
 * @see media_recorder_add()
 */
function media_recorder_add_validate($form, &$form_state) {
  global $user;
  $title = isset($form_state['values']['media_recorder']['media_recorder_title']) ? $form_state['values']['media_recorder']['media_recorder_title'] : '';
  $fid = !empty($form_state['values']['media_recorder']['und'][0]['fid']) ? $form_state['values']['media_recorder']['und'][0]['fid'] : 0;
  $filepath = isset($form_state['values']['media_recorder']['und'][0]['media_recorder_filepath']) ? $form_state['values']['media_recorder']['und'][0]['media_recorder_filepath'] : '';
  $file = NULL;
  // Check file exists.
  if ($fid == 0 && empty($filepath)) {
    if ($form['media_recorder']['#required']) {
      form_set_error('fid', t('No Recording submitted.'));
      return;
    }
    else {
      return;
    }
  }
  // Load file from filepath (file saved with WAMI recorder).
  // WAMI doesn't give access to server response, so we use file uri.
  // This will be deprecated when getUserMedia is available and consistant
  // in all browsers.
  if (is_string($filepath)) {
    $file = file_uri_to_object($filepath);
    $file = file_load($file->fid);
  }
  // Load file from fid (files saved using XHR).
  elseif ($fid !== 0) {
    $file = file_load($fid);
  }
  // Check file has been loaded properly.
  if (is_null($file)) {
    form_set_error('fid', t('No Recording submitted.'));
    return;
  }
  // Check title exists.
  if (empty($title)) {
    form_set_error('media_recorder_title', t('Recording cannot be saved without a title.'));
    return;
  }
  // Process file.
  if ($file) {
    // Validate file type.
    $file->filename = drupal_basename($file->uri);
    $file_validate_size_errors = file_validate($file, array(
      'file_validate_extensions' => array('wav mp3 m4a mpg mov m4v mp4 mpeg avi ogg oga ogv'),
    ));
    if (empty($file_validate_size_errors)) {
      $upload_directory = 'public://' . token_replace(variable_get('media_recorder_upload_directory', ''));
      file_prepare_directory($upload_directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
      // Move file to change it's filename.
      $file = file_move($file, $upload_directory . '/' . transliteration_clean_filename($title) . '.wav');
      // Save permanent file with new title.
      $file->filename = trim($title);
      $file->display = TRUE;
      $file->status = FILE_STATUS_PERMANENT;
      $file = file_save($file);
      // Set file element to saved file.
      $form_state['input']['media_recorder']['und'][0]['fid'] = $file->fid;
      $form_state['input']['media_recorder']['und'][0]['media_recorder_filepath'] = $file->uri;
      $form_state['values']['media_recorder']['und'][0]['fid'] = $file->fid;
      $form_state['values']['media_recorder']['und'][0]['media_recorder_filepath'] = $file->uri;
      // Notify user of successful upload.
      drupal_set_message(t('The file @name was uploaded', array('@name' => $file->filename)));
    }
    // Report file validation errors.
    else {
      form_set_error('fid', implode('<br />', $file_validate_size_errors));
      return;
    }
  }
}

/**
 * Process callback for media recorder field.
 * @see media_recorder_add()
 */
function media_recorder_add_form_process($element, &$form_state, &$form) {
  media_recorder_process_file($element, $form_state);
  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function media_recorder_field_widget_info() {
  return array(
    'media_recorder' => array(
      'label' => t('Media Recorder'),
      'field types' => array('file'),
      'settings' => array(
        'progress_indicator' => 'throbber',
        'allowed_schemes' => array('public', 'private'),
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function media_recorder_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $field['settings']['display_field'] = 0;
  $settings = $instance['settings'];
  $elements = file_field_widget_form($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
  foreach (element_children($elements) as $delta) {
    $fields[] = $delta;
    $elements[$delta]['#delta'] = $delta;
    // Add a hidden filepath input.
    if (empty($elements[$delta]['#default_value']['fid'])) {
      $elements[$delta]['media_recorder_filepath']['#type'] = 'hidden';
      $elements[$delta]['#process'][] = 'media_recorder_widget_form_process';
      $elements[$delta]['#element_validate'][] = 'media_recorder_field_widget_form_validate';
    }
  }
  if ($field['cardinality'] == 1) {
    if (empty($elements[0]['#default_value']['fid'])) {
      $elements[0]['#description'] = theme('file_upload_help', array('description' => $instance['description'], 'upload_validators' => $elements[0]['#upload_validators']));
    }
  }
  else {
    $elements['#file_upload_description'] = theme('file_upload_help', array('upload_validators' => $elements[0]['#upload_validators']));
  }
  return $elements;
}

/**
 * Custom validation callback.
 * @see media_recorder_field_widget_form()
 */
function media_recorder_field_widget_form_validate($element, &$form_state) {
  global $user;
  $field_name = $element['#field_name'];
  $langcode = $element['#language'];
  // Iterate through field and process values.
  foreach ($form_state['values'][$field_name][$langcode] as $key => $values) {
    $title = '';
    $fid = !empty($values['fid']) ? $values['fid'] : 0;
    $filepath = !empty($values['media_recorder_filepath']) ? $values['media_recorder_filepath'] : '';
    $file = NULL;
    // Check file exists.
    if ($fid == 0 && empty($filepath)) {
      if ($element['#required']) {
        form_set_error('fid', t('No Recording submitted.'));
        return;
      }
      else {
        return;
      }
    }
    // Load file from filepath (file saved with WAMI recorder).
    // WAMI doesn't give access to server response, so we use file uri.
    // This will be deprecated when getUserMedia is available and consistant
    // in all browsers.
    if (is_string($filepath) && !empty($filepath)) {
      $file = file_uri_to_object($filepath);
      $file = file_load($file->fid);
    }
    // Load file from fid (files saved using XHR).
    else {
      $file = file_load($fid);
    }
    // Check file has been loaded properly.
    if (is_null($file)) {
      form_set_error('fid', t('No Recording submitted.'));
      return;
    }
    // Grab title from entity if available.
    if (isset($form_state['values']['title']) && !empty($form_state['values']['title'])) {
      $title = $form_state['values']['title'];
    }
    // Add custom logic for comments.
    // TODO: This needs improved to be scalable for all entity types.
    elseif (isset($form_state['comment']) && is_object($form_state['comment']) && isset($form_state['values']['nid']) && is_numeric($form_state['values']['nid'])) {
      $node = node_load($form_state['values']['nid']);
      $title = 'Comment on ' . $node->title;
    }
    // Check title exists.
    if (empty($title)) {
      form_set_error('media_recorder_title', t('Recording cannot be saved without a title.'));
      return;
    }
    // Process file.
    if ($file) {
      // Validate file type.
      $file->filename = drupal_basename($file->uri);
      $file_validate_size_errors = file_validate($file, array(
        'file_validate_extensions' => array('wav mp3 m4a mpg mov m4v mp4 mpeg avi ogg oga ogv'),
      ));
      if (empty($file_validate_size_errors)) {
        $path_info = pathinfo($file->uri);
        $upload_directory = $element['#upload_location'];
        file_prepare_directory($upload_directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
        // Move file to change it's filename.
        $file = file_move($file, $element['#upload_location'] . '/' . transliteration_clean_filename($title) . '.' . $path_info['extension']);
        // Save permanent file with new title.
        $file->filename = trim($title);
        $file->display = TRUE;
        $file->status = FILE_STATUS_PERMANENT;
        $file = file_save($file);
        // Set new values for this element.
        $form_state['values'][$field_name][$langcode][$key]['fid'] = $file->fid;
        $form_state['values'][$field_name][$langcode][$key]['display'] = 1;
      }
      // Report file validation errors.
      else {
        form_set_error('media_recorder_upload', implode('<br />', $file_validate_size_errors));
        return;
      }
    }
  }
}

/**
 * Process callback for media recorder field.
 * @see media_recorder_field_widget_form()
 */
function media_recorder_widget_form_process($element, &$form_state, &$form) {
  $element = file_managed_file_process($element, $form_state, $form);
  media_recorder_process_file($element, $form_state);
  return $element;
}

/**
 * Helper function for process callbacks.
 * @see media_recorder_add_form_process()
 * @see media_recorder_widget_form_process()
 */
function media_recorder_process_file(&$element, &$form_state) {
  global $user;
  $field_name = isset($element['#field_name']) ? $element['#field_name'] : 'media_recorder';
  $language = isset($element['#language']) ? $element['#language'] : 'und';
  $delta = isset($element['#delta']) ? $element['#delta'] : 0;
  $filename = $user->sid . '.wav';
  $recordpath = url('media_recorder/record');
  $filepath = 'public://media_recorder';
  $url = file_create_url($filepath);
  // Add recorder.
  $media_recorder = variable_get('media_recorder', array());
  $media_recorder_fid = isset($media_recorder['und'][0]['fid']) ? $media_recorder['und'][0]['fid'] : '';
  $variables = array(
    'cssid' => 'media-recorder-' . $field_name . '-' . $language . '-' . $delta,
    'width' => variable_get('media_recorder_width', 300),
    'height' => variable_get('media_recorder_height', 100),
    'timelimit' => variable_get('media_recorder_timelimit', 300),
    'audio' => !empty($element['#default_value']['fid']) ? $element['#default_value']['fid'] : $media_recorder_fid,
  );
  $element['markup']['#markup'] = theme('media_recorder', $variables);
  // Add general css/js/settings.
  $element['markup']['#attached']['library'][] = array('system', 'ui.progressbar');
  $element['markup']['#attached']['library'][] = array('system', 'ui.slider');
  $element['markup']['#attached']['library'][] = array('media_recorder', 'swfobject');
  $element['markup']['#attached']['library'][] = array('media_recorder', 'wami');
  $element['markup']['#attached']['library'][] = array('media_recorder', 'Recorderjs');
  $element['markup']['#attached']['css'][] = drupal_get_path('module', 'media_recorder') . '/css/media_recorder.css';
  $element['markup']['#attached']['js'][] = drupal_get_path('module', 'media_recorder') . '/js/media_recorder.js';
  $element['markup']['#attached']['js'][] = drupal_get_path('module', 'media_recorder') . '/js/jquery.mediaRecorder.js';
  $element['markup']['#attached']['js'][] = array(
    'data' => array(
      'mediaRecorder' => array(
        'fieldName' => $field_name,
        'language' => $language,
        'delta' => $delta,
        'fileName' => $filename,
        'recordingPath' => $recordpath,
        'filePath' => $filepath,
        'url' => $url,
        'timeLimit' => variable_get('media_recorder_timelimit', 300) * 1000,
      ),
    ),
    'type' => 'setting',
  );
}
