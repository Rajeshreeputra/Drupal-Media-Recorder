<?php
/**
 * @file
 * Adds a media recorder widget and add form to the media module.
 */

/**
 * Implements hook_library().
 */
function media_recorder_library() {
  $libraries = array();
  $libraries['swfobject'] = array(
    'title' => 'SWFObject',
    'version' => '2.2',
    'website' => 'http://code.google.com/p/swfobject/',
    'js' => array(
      libraries_get_path('swfobject') . '/swfobject.js' => array('group' => JS_LIBRARY, 'preprocess' => FALSE),
    ),
  );
  $libraries['wami'] = array(
    'title' => 'WAMI Recorder',
    'version' => '',
    'website' => 'http://code.google.com/p/wami-recorder/',
    'js' => array(
      libraries_get_path('wami') . '/recorder.js' => array('group' => JS_LIBRARY, 'preprocess' => FALSE),
    ),
  );
  $libraries['Recorderjs'] = array(
    'title' => 'Recorderjs',
    'version' => '',
    'website' => 'https://github.com/mattdiamond/Recorderjs/',
    'js' => array(
      libraries_get_path('Recorderjs') . '/recorder.js' => array('group' => JS_LIBRARY, 'preprocess' => FALSE),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_menu().
 */
function media_recorder_menu() {
  $items = array();
  $items['file/add/record'] = array(
    'title' => 'Record',
    'description' => 'Add recordings to your media library.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_recorder_add'),
    'access callback' => 'file_entity_access',
    'access arguments' => array('create'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['media_recorder/record/%'] = array(
    'title' => 'Record',
    'description' => 'Record a video or audio file.',
    'page callback' => 'media_recorder_record',
    'access callback' => 'file_entity_access',
    'access arguments' => array('create'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/media/mediarecorder'] = array(
    'title' => 'Media Recorder',
    'description' => 'Configure the media recorder.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_recorder_admin_form'),
    'access arguments' => array('administer files'),
    'file' => 'media_recorder.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_help().
 */
function media_recorder_help($path, $arg) {
  if ($path == 'admin/help#media_recorder') {
    $output = file_get_contents(drupal_get_path('module', 'media_recorder') . '/README.txt');
    return nl2br($output);
  }
}

/**
 * Implements hook_theme().
 */
function media_recorder_theme() {
  return array(
    'media_recorder' => array(
      'template' => 'theme/media-recorder',
      'variables' => array(
        'cssid' => 'media-recorder',
        'width' => 300,
        'height' => 100,
        'timelimit' => 300000,
        'audio' => NULL,
      ),
    ),
  );
}

/**
 * Preprocess function for a player.
 */
function template_preprocess_media_recorder(&$variables) {
  $variables['cssid'] = is_string($variables['cssid']) ? $variables['cssid'] : 'media-recorder';
  $variables['width'] = is_numeric($variables['width']) ? $variables['width'] : 300;
  $variables['height'] = is_numeric($variables['height']) ? $variables['height'] : 100;
  $variables['timelimit'] = is_numeric($variables['timelimit']) ? gmdate('i:s', $variables['timelimit']) : '05:00';
  $fid = (isset($variables['audio']) && is_numeric($variables['audio'])) ? $variables['audio'] : '';
  $file = !empty($fid) ? file_load($fid) : NULL;
  // Render audio file.
  if (is_object($file)) {
    $url = file_create_url($file->uri);
    // Mediaelement available.
    if (module_exists('mediaelement')) {
      $settings = array(
        'controls' => 1,
        'width' => '100%',
        'height' => 30,
        'download_link' => 0,
        'download_text' => t('Download'),
      );
      $js_settings = array();
      $js_settings['opts'] = array();
      $js_settings['controls'] = (bool) $settings['controls'];
      $js_settings['opts']['audioWidth'] = '100%';
      $js_settings['opts']['audioHeight'] = 30;
      $class = 'mediaelement_audio' . $variables['id'];
      $audio = array(
        '#theme' => 'mediaelement_audio',
        '#attributes' => array(
          'src' => $url,
          'class' => $class,
        ),
        '#settings' => $settings,
        '#attached' => array(
          'library' => array(array('mediaelement', 'mediaelement')),
          'js' => array(
            drupal_get_path('module', 'mediaelement') . '/mediaelement.js' => array(),
            0 => array('type' => 'setting', 'data' => array('mediaelement' => array('.' . $class => $js_settings))),
          ),
        ),
      );
      $variables['audio'] = drupal_render($audio);
    }
    // Mediaelement not available.
    else {
      $variables['audio'] = '<audio id="media-recorder-audio" controls src="' . $url . '" type="audio/wav" width="300" height="30"></audio>';
    }
  }
  // No file present.
  else {
    $variables['audio'] = '<audio id="media-recorder-audio" controls width="300" height="30"></audio>';
  }
}

/**
 * Menu callback for recording a media file.
 */
function media_recorder_record() {
  // Get filename.
  $filename = arg(2);
  // File data is sent using XHR.
  if (isset($_FILES['mediaRecorder']['tmp_name'])) {
    $url = $_FILES['mediaRecorder']['tmp_name'];
  }
  // File data is sent from flash.
  else {
    $url = 'php://input';
  }
  // Process file.
  if (!empty($filename) && !empty($url)) {
    $upload_directory = 'public://media_recorder';
    file_prepare_directory($upload_directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
    $uri = $upload_directory . '/' . $filename;
    $data = file_get_contents($url);
    $file = file_save_data($data, $uri, FILE_EXISTS_REPLACE);
    $file->status = 0;
    file_save($file);
    echo drupal_json_output($file);
  }
  else {
    echo FALSE;
  }
}

/**
 * Provides a form for adding media items using the Wami Recorder.
 */
function media_recorder_add($form, &$form_state) {

  // Set field variables.
  $field_name = 'field_media_recorder';
  $langcode = LANGUAGE_NONE;
  $items = array();
  $delta = 0;
  $field = array();
  $instance = array(
    'settings' => array(
      'file_directory' => variable_get('media_recorder_upload_directory', ''),
      'file_extensions' => 'wav mp3 m4a mov m4v mp4 mpeg mpg avi ogg oga ogv',
    ),
  );
  $element['#field_name'] = $field_name;
  $element['#language'] = $langcode;
  $element['#delta'] = $delta;
  $element['#field_parents'] = array();
  $element['#columns'] = array('fid', 'display', 'description');
  $element['#title'] = t('Media Recorder');
  $element['#required'] = TRUE;

  // Add title field.
  $form['media_recorder']['#title'] = t('Title');

  // Add title field.
  $form['media_recorder']['title']['#type'] = 'textfield';
  $form['media_recorder']['title']['#title'] = t('Title');
  $form['media_recorder']['title']['#required'] = TRUE;

  // Add media recorder element.
  $form['media_recorder']['field_media_recorder']['#type'] = 'container';
  $form['media_recorder']['field_media_recorder']['#tree'] = TRUE;
  $form['media_recorder']['field_media_recorder'][$langcode] = media_recorder_field_widget_form($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);

  // Add a submit button.
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit']['#type'] = 'submit';
  $form['actions']['submit']['#value'] = t('Save Recording');

  return $form;
}

/**
 * Implements hook_field_widget_info().
 */
function media_recorder_field_widget_info() {
  return array(
    'media_recorder' => array(
      'label' => t('Media Recorder'),
      'field types' => array('file'),
      'settings' => array(
        'progress_indicator' => 'throbber',
        'allowed_schemes' => array('public', 'private'),
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function media_recorder_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  // Set recorder variables.
  $field_name = $element['#field_name'];
  $filename = uniqid() . '.wav';
  $recordpath = url('media_recorder/record');
  $filepath = 'public://media_recorder';
  $url = file_create_url($filepath);
  $fid = 0;

  $element['#type'] = 'fieldset';

  // Determine the current file id.
  if (isset($form_state['values']['fid']) && !empty($form_state['values']['fid'])) {
    $fid = $form_state['values']['fid'];
  }
  elseif (isset($element['#entity']->{$field_name}[$langcode][$delta]['fid']) && !empty($element['#entity']->{$field_name}[$langcode][$delta]['fid'])) {
    $fid = $element['#entity']->{$field_name}[$langcode][$delta]['fid'];
  }

  // Build file field and set values.
  $element[$delta]['fid']['#type'] = 'hidden';
  $element[$delta]['fid']['#value'] = $fid;
  $element[$delta]['display']['#type'] = 'hidden';
  $element[$delta]['display']['#value'] = TRUE;

  // Add upload location and validators.
  $element['#upload_location'] = $instance['settings']['file_directory'];
  if (isset($instance['settings']['file_extensions'])) {
    $validators['file_validate_extensions'] = array($instance['settings']['file_extensions']);
  }
  if (isset($instance['settings']['max_filesize'])) {
    $validators['file_validate_size'] = array($instance['settings']['max_filesize']);
  }
  $element['#upload_validators'] = array($validators);

  // If browscap is installed, check if ismobiledevice.
  if (module_exists('browscap')) {
    $browser = browscap_get_browser();
  }

  // If this is a mobile device, only show a file field.
  if (isset($browser)) {
    if ($browser['ismobiledevice'] == 'true' || $browser['ismobiledevice'] == TRUE) {
      $element[$delta]['file'] = array(
        '#type' => 'file',
        '#required' => $element['#required'],
        '#title' => t('File'),
        '#title_display' => 'invisible',
      );
      $element['#element_validate'][] = 'media_recorder_field_widget_form_file_validate';
      return $element;
    }
  }

  // Set current toggle state and options.
  $toggle = isset($form_state['values']['op']) ? $form_state['values']['op'] : 'Recorder';

  // Test if youtube is an available provider for the media module.
  // This currently doesn't work for the media_youtube module, it only
  // works for oembed.
  $youtube = TRUE;
  try {
    media_internet_get_provider('http://youtube.com/watch');
  }
  catch (Exception $e) {
    $youtube = FALSE;
  }

  // Manually check if media_youtube has been installed.
  if (module_exists('media_youtube')) {
    $youtube = TRUE;
  }

  // Add toggle buttons if youtube is a provider.
  if ($youtube) {
    // Toggle record.
    $element[$delta]['toggle']['#prefix'] = '<div class="media-recorder-toggle">';
    $element[$delta]['toggle']['#suffix'] = '</div>';

    $element[$delta]['toggle']['record']['#type'] = 'button';
    $element[$delta]['toggle']['record']['#value'] = t('Recorder');
    $element[$delta]['toggle']['record']['#executes_submit_callback'] = FALSE;
    $element[$delta]['toggle']['record']['#limit_validation_errors'] = array();
    $element[$delta]['toggle']['record']['#attributes']['class'][] = 'button';
    $element[$delta]['toggle']['record']['#attributes']['title'] = t('Record using the HTML5 or Flash recorder.');

    // Toggle youtube upload widget.
    $element[$delta]['toggle']['youtube']['#type'] = 'button';
    $element[$delta]['toggle']['youtube']['#value'] = t('Youtube');
    $element[$delta]['toggle']['youtube']['#executes_submit_callback'] = FALSE;
    $element[$delta]['toggle']['youtube']['#limit_validation_errors'] = array();
    $element[$delta]['toggle']['youtube']['#attributes']['class'][] = 'button';
    $element[$delta]['toggle']['youtube']['#attributes']['title'] = t('Record using the Youtube Upload Widget.');
  }

  // Use the HTML5/Wami recorder.
  if ($toggle == 'Recorder') {

    // Add active class.
    $element[$delta]['toggle']['record']['#attributes']['class'][] = 'active';

    // Add hidden fields for wami recorder.
    $element[$delta]['filepath']['#type'] = 'hidden';

    // Set theme variables for media recorder.
    $media_recorder = variable_get('media_recorder', array());
    $media_recorder_fid = isset($media_recorder[$langcode][0]['fid']) ? $media_recorder[$langcode][0]['fid'] : '';
    $variables = array(
      'cssid' => 'media-recorder-' . $field_name . '-' . $langcode . '-' . $delta,
      'width' => variable_get('media_recorder_width', 300),
      'height' => variable_get('media_recorder_height', 100),
      'timelimit' => variable_get('media_recorder_timelimit', 300),
      'audio' => !empty($fid) ? $fid : $media_recorder_fid,
    );

    // Add media recorder markup.
    $element[$delta]['media_recorder']['#markup'] = theme('media_recorder', $variables);

    // Add javascript and css files.
    $element[$delta]['media_recorder']['#attached']['library'][] = array('system', 'ui.progressbar');
    $element[$delta]['media_recorder']['#attached']['library'][] = array('system', 'ui.slider');
    $element[$delta]['media_recorder']['#attached']['library'][] = array('media_recorder', 'swfobject');
    $element[$delta]['media_recorder']['#attached']['library'][] = array('media_recorder', 'wami');
    $element[$delta]['media_recorder']['#attached']['library'][] = array('media_recorder', 'Recorderjs');
    $element[$delta]['media_recorder']['#attached']['css'][] = drupal_get_path('module', 'media_recorder') . '/css/media_recorder.css';
    $element[$delta]['media_recorder']['#attached']['js'][] = drupal_get_path('module', 'media_recorder') . '/js/media_recorder.js';
    $element[$delta]['media_recorder']['#attached']['js'][] = drupal_get_path('module', 'media_recorder') . '/js/jquery.mediaRecorder.js';

    // Add validation handlers.
    $element['#element_validate'][] = 'media_recorder_field_widget_form_record_validate';
  }

  // Use the youtube upload widget.
  if ($toggle == 'Youtube') {

    // Add active class.
    $element[$delta]['toggle']['youtube']['#attributes']['class'][] = 'active';

    // Add hidden fields for youtube.
    $element[$delta]['youtube']['#type'] = 'hidden';

    // Add youtube recorder markup.
    $element[$delta]['youtube_upload']['#markup'] = '<div id="youtube-upload-widget"><div id="youtube-player-wrapper"><div id="youtube-player"></div></div><div id="youtube-upload-wrapper"><div id="youtube-upload"></div></div></div>';

    // Add javascript and css files.
    $element[$delta]['#attached']['js'][] = 'https://s.ytimg.com/yts/jsbin/www-widgetapi-vflop0WbJ.js';
    $element[$delta]['#attached']['js'][] = 'https://www.youtube.com/iframe_api';
    $element[$delta]['#attached']['js'][] = drupal_get_path('module', 'media_recorder') . '/js/media_recorder_youtube.js';

    // Add validation handlers.
    $element['#element_validate'][] = 'media_recorder_field_widget_form_youtube_validate';
  }

  // Add javascript settings.
  $element['#attached']['js'][] = array(
    'data' => array(
      'mediaRecorder' => array(
        'fieldName' => $field_name,
        'language' => $langcode,
        'delta' => $delta,
        'fileName' => $filename,
        'recordingPath' => $recordpath,
        'filePath' => $filepath,
        'url' => $url,
        'timeLimit' => variable_get('media_recorder_timelimit', 300) * 1000,
      ),
    ),
    'type' => 'setting',
  );

  return $element;
}

/**
 * Custom validation callback.
 * @see media_recorder_field_widget_form()
 */
function media_recorder_field_widget_form_file_validate($element, &$form_state) {

  // Get field information.
  $field_name = $element['#parents'][0];
  $langcode = $element['#parents'][1];
  $delta = $element['#parents'][2];

  // Get field values.
  $title = '';
  $fid = $form_state['values'][$field_name][$langcode][$delta]['fid'];
  $file = file_save_upload($field_name, $element['#upload_validators']);

  // Form was saved with an existing fid set and no new file.
  if ($fid && !$file) {
    // Set file field values if needed.
    $form_state['values'][$field_name][$langcode][$delta]['fid'] = $fid;
    $form_state['values'][$field_name][$langcode][$delta]['display'] = 1;
    return;
  }

  // Check that file exists.
  if (!$file) {
    if ($element['#required']) {
      form_set_error('media_recorder', t('No Recording submitted.'));
      return;
    }
    else {
      return;
    }
  }

  // Grab title from entity if available.
  if (isset($form_state['values']['title']) && !empty($form_state['values']['title'])) {
    $title = $form_state['values']['title'];
  }

  // Add custom logic for comments.
  elseif (isset($form_state['comment']) && is_object($form_state['comment'])) {
    // Use the comment subject value if present.
    if (isset($form_state['values']['subject']) && !empty($form_state['values']['subject'])) {
      $title = $form_state['values']['subject'];
    }
    // Otherwise use the node title.
    elseif (isset($form_state['comment']->nid) && is_numeric($form_state['comment']->nid)) {
      $node = node_load($form_state['values']['nid']);
      $title = t('Comment on @title', array('@title' => $node->title));
    }
  }

  // Check title exists.
  if (empty($title)) {
    form_set_error('title', t('Recording cannot be saved without a title.'));
    return;
  }

  // Validate file.
  $file->filename = drupal_basename($file->uri);
  $file_validate_size_errors = file_validate($file, $element['#upload_validators']);
  if (empty($file_validate_size_errors)) {

    // Prepare directory.
    $path_info = pathinfo($file->uri);
    if (module_exists('token')) {
      $upload_location = 'public://' . token_replace($element['#upload_location']);
    }
    else {
      $upload_location = 'public://' . $element['#upload_location'];
    }
    if (file_prepare_directory($upload_location, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {

      // Move file to change it's filename.
      $file = file_move($file, $upload_location . '/' . transliteration_clean_filename($title) . '.' . $path_info['extension']);

      // Save permanent file with new title.
      $file->filename = trim($title);
      $file->display = TRUE;
      $file->status = FILE_STATUS_PERMANENT;
      $file = file_save($file);

      // Set file field values if needed.
      $form_state['values'][$field_name][$langcode][$delta]['fid'] = $file->fid;
      $form_state['values'][$field_name][$langcode][$delta]['display'] = 1;

      // Delete the old file if it exists.
      if ($fid !== $file->fid) {
        $file = file_load($fid);
        file_delete($file);
      }
    }
  }

  // Report file validation errors.
  else {
    form_set_error('media_recorder', implode('<br />', $file_validate_size_errors));
    return;
  }
}

/**
 * Custom validation callback.
 * @see media_recorder_field_widget_form()
 */
function media_recorder_field_widget_form_record_validate($element, &$form_state) {

  // Get field information.
  $field_name = $element['#parents'][0];
  $langcode = $element['#parents'][1];
  $delta = isset($element['#parents'][2]) ? $element['#parents'][2] : 0;

  // Get field values.
  $title = '';
  $filepath = !empty($form_state['values'][$field_name][$langcode][$delta]['filepath']) ? $form_state['values'][$field_name][$langcode][$delta]['filepath'] : '';
  $fid = !empty($form_state['values'][$field_name][$langcode][$delta]['fid']) ? $form_state['values'][$field_name][$langcode][$delta]['fid'] : 0;

  // Check file exists.
  if ($fid == 0 && empty($filepath)) {
    if ($element['#required']) {
      form_set_error('media_recorder', t('No Recording submitted.'));
      return;
    }
    else {
      return;
    }
  }

  // Load file from filepath (file saved with WAMI recorder).
  // WAMI doesn't give access to server response, so we use file uri.
  // This will be deprecated when getUserMedia is available and consistant
  // in all browsers.
  if (is_string($filepath) && !empty($filepath)) {
    $file = file_uri_to_object($filepath);
  }

  // Load file from fid (files saved using XHR).
  else {
    $file = file_load($fid);
  }

  // Grab title from entity if available.
  if (isset($form_state['values']['title']) && !empty($form_state['values']['title'])) {
    $title = $form_state['values']['title'];
  }

  // Add custom logic for comments.
  elseif (isset($form_state['comment']) && is_object($form_state['comment'])) {
    // Use the comment subject value if present.
    if (isset($form_state['values']['subject']) && !empty($form_state['values']['subject'])) {
      $title = $form_state['values']['subject'];
    }
    // Otherwise use the node title.
    elseif (isset($form_state['comment']->nid) && is_numeric($form_state['comment']->nid)) {
      $node = node_load($form_state['values']['nid']);
      $title = t('Comment on @title', array('@title' => $node->title));
    }
  }

  // Check title exists.
  if (empty($title)) {
    form_set_error('title', t('Recording cannot be saved without a title.'));
    return;
  }

  // Process file.
  if ($file) {

    // Validate file.
    $file->filename = drupal_basename($file->uri);
    $file_validate_size_errors = file_validate($file, $element['#upload_validators']);
    if (empty($file_validate_size_errors)) {

      // Prepare directory.
      $path_info = pathinfo($file->uri);
      if (module_exists('token')) {
        $upload_location = 'public://' . token_replace($element['#upload_location']);
      }
      else {
        $upload_location = 'public://' . $element['#upload_location'];
      }
      if (file_prepare_directory($upload_location, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {

        // Move file to change it's filename.
        $file = file_move($file, $upload_location . '/' . transliteration_clean_filename($title) . '.' . $path_info['extension']);

        // Save permanent file with new title.
        $file->filename = trim($title);
        $file->display = TRUE;
        $file->status = FILE_STATUS_PERMANENT;
        $file = file_save($file);

        // Set file field values if needed.
        $form_state['values'][$field_name][$langcode][$delta]['fid'] = $file->fid;
        $form_state['values'][$field_name][$langcode][$delta]['display'] = 1;
      }
    }

    // Report file validation errors.
    else {
      form_set_error('media_recorder', implode('<br />', $file_validate_size_errors));
      return;
    }
  }
}

/**
 * Custom validation callback.
 * @see media_recorder_field_widget_form()
 */
function media_recorder_field_widget_form_youtube_validate($element, &$form_state) {

  // Get field information.
  $field_name = $element['#parents'][0];
  $langcode = $element['#parents'][1];
  $delta = isset($element['#parents'][2]) ? $element['#parents'][2] : 0;

  // Get field values.
  $title = '';
  $fid = !empty($form_state['values'][$field_name][$langcode][$delta]['fid']) ? $form_state['values'][$field_name][$langcode][$delta]['fid'] : 0;
  $youtube = !empty($form_state['values'][$field_name][$langcode][$delta]['youtube']) ? $form_state['values'][$field_name][$langcode][$delta]['youtube'] : '';

  // Form was saved with an existing fid set and no new file.
  if ($fid && (!is_string($youtube) || empty($youtube))) {
    // Set file field values if needed.
    $form_state['values'][$field_name][$langcode][$delta]['fid'] = $fid;
    $form_state['values'][$field_name][$langcode][$delta]['display'] = 1;
    return;
  }

  // Check that a youtube video was uploaded.
  if ($fid == 0 && (!is_string($youtube) || empty($youtube))) {
    if ($element['#required']) {
      form_set_error('youtube_upload', t('No Recording submitted.'));
      return;
    }
    else {
      return;
    }
  }

  // Create a youtube link from youtube video value.
  $embed_code = 'http://youtube.com/watch?v=' . $youtube;

  // Grab title from entity if available.
  if (isset($form_state['values']['title']) && !empty($form_state['values']['title'])) {
    $title = $form_state['values']['title'];
  }

  // Add custom logic for comments.
  elseif (isset($form_state['comment']) && is_object($form_state['comment'])) {
    // Use the comment subject value if present.
    if (isset($form_state['values']['subject']) && !empty($form_state['values']['subject'])) {
      $title = $form_state['values']['subject'];
    }
    // Otherwise use the node title.
    elseif (isset($form_state['comment']->nid) && is_numeric($form_state['comment']->nid)) {
      $node = node_load($form_state['values']['nid']);
      $title = t('Comment on @title', array('@title' => $node->title));
    }
  }

  // Check title exists.
  if (empty($title)) {
    form_set_error('title', t('Recording cannot be saved without a title.'));
    return;
  }

  // Try saving the youtube file using media_internet_get_provider().
  try {
    $provider = media_internet_get_provider($embed_code);
    $file = $provider->save();
  }
  catch (Exception $e) {
    form_set_error('youtube', $e->getMessage());
    return;
  }

  // Check that file saved correctly.
  if (!$file->fid) {
    form_set_error('youtube', t('The file %file could not be saved. An unknown error has occurred.', array('%file' => $embed_code)));
    return;
  }
  else {
    // Save permanent file with new title.
    $file->filename = trim($title);
    $file->display = TRUE;
    $file->status = FILE_STATUS_PERMANENT;
    $file = file_save($file);

    // Set file field values if needed.
    $form_state['values'][$field_name][$langcode][$delta]['fid'] = $file->fid;
    $form_state['values'][$field_name][$langcode][$delta]['display'] = 1;
  }
}
